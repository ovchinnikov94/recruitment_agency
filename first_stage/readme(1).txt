Вариант 11. 
Кадровое агенство. Овчинников Дмитрий гр. 327
Операции, которые планируются реализовать:
1) Поиск вакансий по разным параметрам(зарплата, компания, сфера деятельности, другие требования)
2) Поиск резюме по разным параметрам(зарплата, сфера деятельности, образование)
3) Добавление/редактирование резюме
4) Добавление/редактирование вакансии
5) Добавление/редактирование компании
6) Просмотр истории работника

1.1) Поиск вакансий по шагам:
	1.1.1) Извлекаем главный параметр: что искать: 
		-Компанию
		-Вакансию
		-Резюме
		Если компанию, то переходим на список компаний и используем все остальные параметры для поиска
		Аналогично для вакансий и резюме.
		Если этот параметр неопределен выдаем ошибку и просим еще раз попробовать поискать.
	1.1.2)  Поиск собирает остальные параметры для поиска, если существующий параметр неопределен, не делаем выборку по нему
	1.1.3) Перенаправляет на соответствующую позицию в согласии с первым пунктом
1.2) Список вакансий по шагам:
	1.2.1) Извлекаем параметры поиска
	1.2.2) Отправляем запрос sql-серверу (таблица vacancy и все связанные с ней таблицы)
	1.2.3) Обрабатываем результат и выдаем его на страницу
1.3) Список резюме/компаний по шагам:
	Аналогично пункту 1.2
1.4) Добавление/редактирование резюме/вакансии/компании по шагам:
	(Будет введен еще скрытый параметр create_new, который будет показывать, откуда мы пришли: из просто редактирования страницы или из добавления новой страницы - т.е. страница будет одна, а выполнять будет две функции: добавление и редактирование)
	1.4.1) Обрабатываем запрос
	1.4.2) Проверяем на корректность введенные данные
	1.4.3) Отправляем sql-запрос в зависимости от параметра create_new(пояснение см. выше) (в таблицы people, lang, post, sphere)
1.5) История работника
	1.5.1) Отправляем запрос в sql базу(таблицы history, people, post, company)
	1.5.2) Обрабатываем ответ и выдаем результат на страницу
1.6) Резюме/вакансия/компания
	1.6.1) Запрос в базу данных(таблицы people/vacancy/kompany и все связанные с ними)
	1.6.2) Обработка ответа и выдача результата

Как это планируется реализовать: 
1) Создана база данных(mysql), состоящая из 15 таблиц (схема прилагается в текущей директории), также она частично заполнена данными.
 По схеме должно быть понятно, как будет устроена работа в ней. 

2) Планируется создать 12 (+-2) страницы. Общая схема их взаимодействия показана на соответствующем рисунке.

***В ТЗ ничего не сказано про возможность иметь у человека нескольких резюме, поэтому в данном контексте - резюме и человек - синонимы(одна сущность)

2.1) Страница поиска
	Страница поиска будет выполнять поиск по резюме, по вакансиям, по компаниям - в зависимости от того, что выберет пользователь.
	Также будут и другие параметры поиска такие, как зарплата "от *** до ***", язык, образование, навыки. Также можно будет выбрать сферу деятельности.
	Страница поиска своим результатом будет выдавать список вакансий/компаний/резюме в зависимости от запроса пользователя.
2.2) Список вакансий/компаний/резюме 
	будет содержать сам список на ссыллающиеся объекты - людей, компаний, вакансий.
	Также будет содержать кнопки навигации: "Главная страница", "Новый поиск"
	Также будет содержать сортировку по некоторым параметрам и кнопку добавления нового резюме/вакансии/компании
2.3) Страница просмотра резюме/вакансии/компании - отличаются друг от друга, но буду иметь похожую структуру:
	Будет содержать информацию о резюме/вакансии/компании
	Кнопка перехода на страницу редактирования/добавления этой сущности
	Если это:
		вакансия - ссылку на компанию, владеющую ей,
		резюме - историю работника (список компаний, в которых он работал)
		компания - список вакансий, которыми она распоряжается
2.4) Страница редактирования резюме/вакансии/компании
2.5) Страница истории работника  - список компаний, в которых он работал 

Каким образом будут создаваться страницы:
1) Будут созданы java-классы, соответствующие таблицам из базы данных
2) С помощью Hibernate они буду связаны с таблицами в базе данных
3) Будут реализованы классы - интерфейсы взаимодействия с таблицами
4) С помощью Spring они будут "объединяться"
5) Будут построены классы, отвечающие схеме веб-сайта
6) Будут реализованы JSP динамические страницы, которые будут выполняться на сервере приложений GlassFish3.1